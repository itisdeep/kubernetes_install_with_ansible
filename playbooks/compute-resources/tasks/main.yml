---
# tasks file for compute-resources
- name: Allow root login
  ansible.builtin.replace: 
    path: /etc/ssh/sshd_config
    regexp: '^#PermitRootLogin.*'
    replace: 'PermitRootLogin yes'
    backup: yes
  become: yes
  notify: restart sshd

- name: Check if ssh key pair exists
  stat:
    path: "/home/{{ ansible_user }}/.ssh/id_rsa"
  register: ssh_key

- name: Generate ssh key pair
  command: ssh-keygen -t rsa -b 4096 -f /home/{{ ansible_user }}/.ssh/id_rsa -N ""
  when: ssh_key.stat.exists == False
  become_user: "{{ ansible_user }}"

- name: Ensure .ssh directory exists
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.ssh"
    state: directory
    mode: '0700'
  become_user: "{{ ansible_user }}"

- name: Fetch the public key from the remote machine
  fetch:
    src: "/home/{{ ansible_user }}/.ssh/id_rsa.pub"
    dest: "/tmp/{{ inventory_hostname }}_id_rsa.pub"
    flat: yes
  become_user: "{{ ansible_user }}"

- name: Copy public key to authorized_keys
  authorized_key:
    user: "{{ ansible_user }}"
    state: present
    key: "{{ lookup('file', '/tmp/{{ inventory_hostname }}_id_rsa.pub') }}"
  become_user: "{{ ansible_user }}"

- name: Remove fetched public key from local machine
  file:
    path: "/tmp/{{ inventory_hostname }}_id_rsa.pub"
    state: absent
  ignore_errors: yes

- name: Correct permissions of authorized_keys
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.ssh/authorized_keys"
    mode: '0600'
    state: file
  become_user: "{{ ansible_user }}"